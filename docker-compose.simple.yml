version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: spotter_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-spotter}
      POSTGRES_USER: ${POSTGRES_USER:-spotter}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-spotter_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-spotter} -d ${POSTGRES_DB:-spotter}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spotter_network

  # Django Backend
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.prod
    container_name: spotter_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-spotter}:${POSTGRES_PASSWORD:-spotter_secure_password}@db:5432/${POSTGRES_DB:-spotter}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-dev-key-change-in-production}
      DEBUG: 0
      DJANGO_SETTINGS_MODULE: config.settings
      ALLOWED_HOSTS: backend,localhost,127.0.0.1,0.0.0.0,34.180.15.16
    volumes:
      - static_volume:/home/app/web/staticfiles
      - ./backend/media:/home/app/web/media
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - spotter_network

  # React Frontend (served by Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: spotter_frontend
    restart: unless-stopped
    volumes:
      - ./frontend/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    networks:
      - spotter_network

  # Nginx Reverse Proxy
  nginx:
    build: 
      context: ./nginx
      dockerfile: Dockerfile
    container_name: spotter_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=UTC
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./frontend/build:/usr/share/nginx/html
      - static_volume:/home/app/web/staticfiles:ro
      - ./.well-known:/usr/share/nginx/html/.well-known:ro
      - ./backend/media:/home/app/web/media:ro
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - spotter_network

volumes:
  postgres_data:
  static_volume:

networks:
  spotter_network:
    driver: bridge
